package ru;

import java.util.List;
import java.util.Map;

public interface PreemptiveCache<K, V> {
     /**
      * Вносит запись(объект) в вытесняющий кэш.
      * Каждая запись(объект) имеет индивидуальный ключ на время хранения в кэше
      *
      * @param key
      *            Ключ записи(объекта).
      *            Благодаря этому ключу производится извлечение и удаление записи.
      * @param value
      *             Объект(запись), который записывается в кэш.
      * @throws IllegalArgumentException
      *             Исключение, которое выбрасывается в случае, когда ключ или значение пустые.
      */
    void put(K key, V value);

     /**
      * Извлекает ранее кэшированную запись.
      *
      * @param key
      *             Ключ записи(объекта), хранящейся в кэше.
      * @return
      *             Возвращает кэшированную запись,
      *             возвращает Optional.isEmpty(); если по запрашиваемому ключу объекта не существует.
      * @throws IllegalArgumentException
      *             Исключение, которое выбрасывается в случае, когда ключ имеет пустое значение.
      */
    V get(K key);

     /**
      * Извлекает все записи(объекты) из кэша.
      *
      * @return
      *             Возвращает List результатов(объектов) извлечения записей из кэша.
      */
    List getAllValue();

     /**
      * Извлекает все данные из кэша: записи(объекты) и ключи записей.
      *
      * @return
      *             Возвращает результат в виде Map, содержащей ключи и значения.
      */
    Map getAll();

     /**
      * Удаляет запись(объект) из кэша. Возвращает удалённый объект.
      *
      * @param key
      *             Ключ записи которая должна быть удалена. По ключу производится поиск записи в кэше.
      * @return
      *             Возвращает удалённый объект.
      *             Возвращает Optional.isEmpty(); если по запрашиваемому ключу объекта не существует.
      * @throws IllegalArgumentException
      *             Исключение, которое выбрасывается в случае, когда ключ имеет пустое значение.
      */
    V removeAndGet(K key);

     /**
      * Удаляет запись(объект) из кэша.
      *
      * @param key
      *             Ключ записи которая должна быть удалена. По ключу производится поиск записи в кэше.
      * @return
      *             Возвращает true, если удаление прошло успешно.
      */
    boolean remove(K key);

     /**
      * Возвращает размер кэша.
      *
      * @return
      *             Возвращает размер кэша.
      */
    int size();

     /**
      * Удаляет все данные кэша. Очищает все записи.
      */
    void clear();

}
